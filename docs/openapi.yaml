openapi: '3.0.3'
info:
  title: Online library service
  version: '1.0'
servers:
  - url: http://library.istu.edu/
tags:
  - name: auth
    description: Методы, связанные с аутентификацией
  - name: client
    description: Методы, связанные с клиентом
  - name: catalog
    description: Методы, связанные с каталогом и поиском книг
  - name: basket
    description: Методы, связанные с корзиной
  - name: order
    description: Методы, связанные с заказами

paths:
  /api/book/:
    get:
      tags:
        - catalog
      summary: Список книг с фильтрами
      parameters:
        - name: library
          in: query
          description: Фильтрация по билблиотекам
          schema:
            $ref: "#/components/schemas/LibraryId"
        - name: expression
          in: query
          required: true
          description: Фильтрация с использованием сценариев поиска. Передается напрямую в ИРБИС. Символ $ используется для неполного совпадения. Символы + и * используются соответственно как ИЛИ и И.
          schema:
            type: string
            example: (A=Власов$*T=математика$)+A=Пушкин$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/book/{id}/:
    get:
      tags:
        - catalog
      summary: Информация о книге по id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/BookId"
      responses:
        '404':
          description: Книга не найдена
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /api/book/announcement/:
    get:
      tags:
        - catalog
      summary: Получение списка новых книг в библиотеке
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /api/basket/:
    get:
      tags:
        - basket
      summary: Получение списка книг в корзине
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      tags:
        - basket
      summary: Добавление книг в корзину
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/BookId"
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Книга не найдена
    put:
      tags:
        - basket
      summary: Редактирование списка книг в корзине
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/BookId"
      responses:
        '401':
            description: Unauthorized
        '404':
          description: Книга не найдена
        '200':
          description: OK
  /api/basket/{id}/:
    delete:
      tags:
        - basket
      summary: Удаление книги из корзины    
      responses:
        '401':
          description: Unauthorized
        '404':
          description: Книга не найдена
        '200':
          description: OK  
  
  /api/library/:
    get:
      tags:
        - catalog
      summary: Получение списка библиотек
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Library'
  /api/library/{id}/:
    get:
      tags:
        - catalog
      summary: Информация о бибилиотеке по названию
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/LibraryId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library'
        '404':
          description: Библиотека не найдена

  /api/scenario/:
    get:
      tags:
        - catalog
      summary: Получить список фильтров для поиска книг
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'

  /api/order/:
    get:
      tags:
        - order
      summary: Получение списка заказов на пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
    post:
      tags:
        - order
      summary: Создание нового заказа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                library:
                  $ref: "#/components/schemas/LibraryId"
                books:
                  type: array
                  description: Список заказываемых книг
                  items:
                    $ref: "#/components/schemas/BookId"
                borrowed: 
                  type: array
                  description: Список долгов, которые будут принесены
                  nullable: true
                  items:
                    $ref: "#/components/schemas/BorrowedBookId"
      responses:
        '200':
          description: OK
        '400':
          description: Ошибка в заказе
        '401':
          description: Unauthorized
  /api/order/{id}/:
    put:
      tags: 
        - order
      summary: Изменение заказа. Возможно только лишь сразу же после того, как заказ был создан
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OrderId"
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  library:
                    $ref: "#/components/schemas/LibraryId"
                  books:
                    type: array
                    description: Список заказываемых книг
                    items:
                      $ref: "#/components/schemas/BookId"
                  borrowed: 
                    type: array
                    description: Список долгов, которые будут принесены
                    nullable: true
                    items:
                      $ref: "#/components/schemas/BorrowedBookId"
      responses:
        '200':
          description: OK
        '400':
          description: Ошибка в заказе или статус закана не равен new
        '401':
          description: Unauthorized
        '404':
          description: Заказ не найден
    delete:
      tags: 
        - order
      summary: Отмена заказа. Возможно только пока заказ не был выдан
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OrderId"
      responses:
        '200':
          description: OK
        '400':
          description: Статус заказа done или более поздний
        '401':
          description: Unauthorized
        '404':
          description: Заказ не найден

  /api/borrowed/:
    get:
      tags:
        - order
      summary: Получение списка взятых книг с автоматическим фильтром по тем, которые были выданы, но не возвращены (долги)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BorrowedBook"
        '401':
          description: Unauthorized

components:
  schemas:
    BookId:
      type: string
      description: ID книги
      example: L711
    Book:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BookId"
        description:
          description: Описание книги
          type: string
        year:
          description: Год издания книги
          type: number
        cover:
          description: Обложка книги
          type: string
          nullable: true
        links:
          description: Ссылки, сопровождающие книгу
          type: array
          nullable: true
          items:
            type: object
            properties:
              url:
                description: Ссылка
                type: string           
              description:
                description: Описание ссылки
                type: string
        library:
          description: Библиотека, в которой находятся книги
          $ref: "#/components/schemas/LibraryId"
        copies:
          description: Количество доступных к заказу экземпляров
          type: number
        can_be_ordered:
          description: Можно ли заказать книгу
          type: boolean
    
    LibraryId:
      type: number
      description: ID библотеки
      example: 1
    Library:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/LibraryId"
        description:
          description: Описание библиотеки
          type: string
          example: Библиотека ИрНИТУ
        address:
          description: Адрес библиотеки
          type: string
          example: г. Иркутск, ул. Лермонтова, 83
    
    Scenario:
      type: object
      description: Описывает сценарий фильтра при поиске
      properties:
        prefix:
          type: string
          description: Префикс
          example: K=
        description:
          type: string
          nullable: true
          description: Описание в произвольной форме
          example: Ключевое слово

    Status:
      type: object
      properties:
        status:
          description: Статус заказа
          type: string
          enum:
           - new
           - processing # Пока отсутствует
           - ready
           - done
           - cancelled
           - error
           - archived
        date:
          description: Дата присвоения статуса
          type: string
          format: date-time
          example: "2024-12-31"
        description:
          type: string
          description: Описание статуса
    OrderId:
      type: number
      description: ID заказа
    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        books:
          description: Список заказанных книг
          type: array
          items:
            $ref: "#/components/schemas/BorrowedBook"
        statuses:
          description: Список статусов заказа
          type: array
          items:
            $ref: "#/components/schemas/Status"
        library:
          $ref: "#/components/schemas/Library"
    
    BorrowedBookId:
      type: number
      description: ID взятой книги
    BorrowedBook:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BorrowedBookId"
        book:
          $ref: "#/components/schemas/Book"
        order:
          $ref: "#/components/schemas/OrderId"
        handed:
          type: boolean
          description: Была ли выдана книга
        returned:
          type: boolean
          description: Возвращена ли книга