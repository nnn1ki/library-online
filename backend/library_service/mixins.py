from aiohttp import ClientSession
from threading import Lock
from adrf import mixins as amixins
from rest_framework.exceptions import PermissionDenied


# –î–æ–≤–æ–ª—å–Ω–æ –∫–æ—Å—Ç—ã–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ –ë–î (data races)
# –õ—É—á—à–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - @transaction.atomic
# –ù–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –∞—Å–∏–Ω–∫ –∫–æ–¥–µ üò¢, —Ç–∞–∫ —á—Ç–æ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
class LockUserMixin:
    mutex = Lock()
    current_users: set[str] = set()

    @staticmethod
    def lock_request(request_handler):
        async def handler(self, *args, **kwargs):
            try:
                self.lock_user()
                return await request_handler(self, *args, **kwargs)
            finally:
                self.unlock_user()

        return handler

    def lock_user(self):
        cls = self.__class__
        username = self.request.user.username
        with cls.mutex:
            if username in cls.current_users:
                raise PermissionDenied("A request is already being processed", code="no_transactions??")
            else:
                cls.current_users.add(username)

    def unlock_user(self):
        cls = self.__class__
        cls.current_users.discard(self.request.user.username)


class ClientSessionMixin:
    client_session: ClientSession | None = None

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context["client_session"] = self.client_session
        return context


class SessionListModelMixin(ClientSessionMixin, amixins.ListModelMixin):
    async def alist(self, *args, **kwargs):
        async with ClientSession() as client:
            self.client_session = client
            return await super().alist(*args, **kwargs)


class SessionRetrieveModelMixin(ClientSessionMixin, amixins.RetrieveModelMixin):
    async def aretrieve(self, *args, **kwargs):
        async with ClientSession() as client:
            self.client_session = client
            return await super().aretrieve(*args, **kwargs)


class SessionCreateModelMixin(ClientSessionMixin, amixins.CreateModelMixin):
    async def acreate(self, *args, **kwargs):
        async with ClientSession() as client:
            self.client_session = client
            return await super().acreate(*args, **kwargs)


class SessionUpdateModelMixin(ClientSessionMixin, amixins.UpdateModelMixin):
    async def aupdate(self, *args, **kwargs):
        async with ClientSession() as client:
            self.client_session = client
            return await super().aupdate(*args, **kwargs)


class SessionDestroyModelMixin(ClientSessionMixin, amixins.DestroyModelMixin):
    async def adestroy(self, *args, **kwargs):
        async with ClientSession() as client:
            self.client_session = client
            return await super().adestroy(*args, **kwargs)
